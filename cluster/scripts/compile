#!/bin/bash

set -e

setup_go_env() {
    echo "setting up go env"
    rm -rf ${output_dir}/*
    rm -rf ${GOPATH}/pkg/*

    rm -rf ${temp_workspace}
    mkdir -p ${temp_workspace}
}

construct_temp_workspace() {
    echo "copying diego release"
    mkdir -p ${temp_workspace}/diego-release
    cp -a ${diego_release_path}/src/ ${temp_workspace}/diego-release/
    rm -rf ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator/lattice
    echo "copying cf release"
    mkdir -p ${temp_workspace}/cf-release/src
    cp -a ${cf_release_path}/src/gorouter ${temp_workspace}/diego-release/src/github.com/cloudfoundry
    cp -a ${cf_release_path}/src/loggregator ${temp_workspace}/cf-release/src
    echo "copying lattice"
    cp -a ${lattice_path} ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator
}

compile_garden_linux() {
    echo "compiling garden linux"
    mkdir -p ${output_dir}/cell/garden
    rm -rf ${GOPATH}/pkg/*

    rm -rf ${GOPATH}/src/github.com/cloudfoundry-incubator/garden-linux/Godeps/_workspace/pkg/*

    GOPATH=${GOPATH}/src/github.com/cloudfoundry-incubator/garden-linux/Godeps/_workspace:${GOPATH} \
        go install -tags daemon github.com/cloudfoundry-incubator/garden-linux

    pushd ${diego_release_path}/src/github.com/cloudfoundry-incubator/garden-linux/old
        make

        cp -a linux_backend/bin ${output_dir}/cell/garden/garden-bin
        cp -a linux_backend/skeleton ${output_dir}/cell/garden/skeleton
    popd

    rm -rf ${GOPATH}/pkg/*
}

compile_gorouter() {
    echo "compiling gorouter"
    rm -rf ${GOPATH}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace/pkg
    GOPATH=${GOPATH}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${GOPATH} \
        go install github.com/cloudfoundry/gorouter
}

compile_brain_loggregator() {
    echo "compiling brain loggregator"
    pushd ${temp_workspace}/cf-release/src/loggregator
        GOPATH=$(pwd) go install trafficcontroller
        GOPATH=$(pwd) go install doppler
        GOPATH=$(pwd) go install metron        
    popd
}

compile_cell_loggregator() {
    echo "compiling cell loggregator"
    pushd ${temp_workspace}/cf-release/src/loggregator
        GOPATH=$(pwd) go install metron
    popd
}

stage_common() {
    echo "staging common files"
    mkdir -p ${temp_workspace}/download
    CONSUL_OBJECT_ID="3e6c1e47-95a5-45ef-aeec-2cb4cc4c529a"
    wget --quiet "http://blob.cfblob.com/${CONSUL_OBJECT_ID}" -O ${temp_workspace}/download/consul.zip

    mkdir -p ${output_dir}/common
    cp -a ${lattice_path}/cluster/common/* ${output_dir}/common/
    cp ${lattice_path}/Version ${output_dir}/common/LATTICE_VERSION
}

stage_scripts() {
    echo "staging scripts"
    mkdir -p ${output_dir}/scripts
    cp -a ${lattice_path}/cluster/scripts/* ${output_dir}/scripts/
}

compile_cell() {
    echo "compiling cell"
    export GOBIN=${output_dir}/cell/bin
    compile_garden_linux

    pushd ${GOPATH}
        go install github.com/cloudfoundry-incubator/rep/cmd/rep
        go install github.com/cloudfoundry-incubator/auctioneer/cmd/auctioneer
        go install github.com/cloudfoundry-incubator/converger/cmd/converger
        go install github.com/cloudfoundry-incubator/lattice/tee2metron
    popd

    rm -rf ${GOPATH}/pkg/*

    compile_cell_loggregator

    pushd ${GOBIN}
        unzip ${temp_workspace}/download/consul.zip
        chmod +x ${GOBIN}/consul
    popd

    cp -a ${lattice_path}/cluster/cell/ ${output_dir}/

    unset GOBIN
}

compile_brain() {
    echo "compiling brain"
    export GOBIN=${output_dir}/brain/bin

    pushd ${GOPATH}
        go install github.com/cloudfoundry-incubator/route-emitter/cmd/route-emitter
        go install github.com/apcera/gnatsd
        go install github.com/cloudfoundry-incubator/receptor/cmd/receptor
        go install github.com/cloudfoundry-incubator/file-server/cmd/file-server
        go install github.com/cloudfoundry-incubator/buildpack_app_lifecycle/healthcheck

        pushd src/github.com/coreos/etcd
            ./build
            cp bin/etcd ${GOBIN}
        popd
    popd

    rm -rf ${GOPATH}/pkg

    compile_gorouter
    compile_brain_loggregator

    pushd ${GOBIN}
        unzip ${temp_workspace}/download/consul.zip
        chmod +x ${GOBIN}/consul
    popd

    cp -a ${lattice_path}/cluster/brain/ ${output_dir}/

    unset GOBIN
}

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
    echo "Incorrect Usage. Usage: $0 output-dir diego-release-path cf-release-path lattice-path"
    exit 1
fi

declare -r output_dir=$1
declare -r diego_release_path=$2
declare -r cf_release_path=$3
declare -r lattice_path=$4
export GOOS=linux
export GOARCH=amd64
declare -r temp_workspace=~/workspace
export GOPATH=${temp_workspace}/diego-release

setup_go_env
construct_temp_workspace

stage_common
stage_scripts
compile_cell
compile_brain
